{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Description Simple rules engine Full Documentation can be found here Requirements python >= 3.6 How to install pip install rules-engine How to use from rules_engine import Rule , RulesEngine , when , then name = \"fyndiq\" RulesEngine ( Rule ( when ( name == \"fyndiq\" ), then ( True ))) . run ( name ) >> True","title":"Getting Started"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#description","text":"Simple rules engine Full Documentation can be found here","title":"Description"},{"location":"#requirements","text":"python >= 3.6","title":"Requirements"},{"location":"#how-to-install","text":"pip install rules-engine","title":"How to install"},{"location":"#how-to-use","text":"from rules_engine import Rule , RulesEngine , when , then name = \"fyndiq\" RulesEngine ( Rule ( when ( name == \"fyndiq\" ), then ( True ))) . run ( name ) >> True","title":"How to use"},{"location":"all/","text":"All Evaluates multiple conditions and if all conditions are True the action is excuted Example We need to check if an object obj is not missing and of type list from rules_engine import Rule , RulesEngine , all_ def is_missing ( obj ): return not obj def is_a_list ( obj ): return isinstance ( obj , list ) obj = [ 1 , 2 ] RulesEngine ( Rule ( all_ ( not_ ( is_missing ), is_a_list ), then ( True ))) . run ( obj ) >>> True","title":"all_"},{"location":"all/#all","text":"Evaluates multiple conditions and if all conditions are True the action is excuted Example We need to check if an object obj is not missing and of type list from rules_engine import Rule , RulesEngine , all_ def is_missing ( obj ): return not obj def is_a_list ( obj ): return isinstance ( obj , list ) obj = [ 1 , 2 ] RulesEngine ( Rule ( all_ ( not_ ( is_missing ), is_a_list ), then ( True ))) . run ( obj ) >>> True","title":"All"},{"location":"any/","text":"Any Evaluates multiple conditions and if any of conditions is True the action is excuted Example We need to check if an object obj is a str or list from rules_engine import Rule , RulesEngine , any_ def is_a_str ( obj ): return isinstance ( obj , str ) def is_a_list ( obj ): return isinstance ( obj , list ) obj = \"Hello\" RulesEngine ( Rule ( any_ ( is_a_str , is_a_list ), then ( True ))) . run ( obj ) >>> True","title":"any_"},{"location":"any/#any","text":"Evaluates multiple conditions and if any of conditions is True the action is excuted Example We need to check if an object obj is a str or list from rules_engine import Rule , RulesEngine , any_ def is_a_str ( obj ): return isinstance ( obj , str ) def is_a_list ( obj ): return isinstance ( obj , list ) obj = \"Hello\" RulesEngine ( Rule ( any_ ( is_a_str , is_a_list ), then ( True ))) . run ( obj ) >>> True","title":"Any"},{"location":"basic_example/","text":"Basic Example In order for an article to be completed it must have the following rules ArticleStockUpdated where stock is > 0 ArticleImageUploaded where the image url is present ArticlePriceUpdated where the price exists from collections import namedtuple from typing import Union from rules_engine import Otherwise , Rule , RulesEngine , then Article = namedtuple ( \"Article\" , \"title price image_url stock\" ) article = Article ( title = \"Iphone Case\" , price = 1000 , image_url = \"http://localhost/image\" , stock = None ) def produce_article_completed_event (): return None def article_controller ( article : Article ) -> Union [ bool , None ]: if not article . stock : return False if not article . price : raise ValueError ( \"Article price missing\" ) if not article . image_url : raise ValueError ( \"Article image_url missing\" ) return produce_article_completed_event () To be able to change to rules engine We need to split the conditions and actions Rules engine is pretty simple if the condition is True The rules engine will run the action ### Conditions def no_article_stock ( article ): return not article . stock def no_article_price ( article ): return not article . price def no_article_image_url ( article ): return not article . image_url ### Actions def article_price_missing_error ( article ): raise ValueError ( \"Article price missing\" ) def article_image_missing_error ( article ): raise ValueError ( \"Article image_url missing\" ) ### Rules Engine def article_complete_rules ( article ): RulesEngine ( Rule ( no_article_stock , then ( False )), Rule ( no_article_price , article_price_missing_error ), Rule ( no_article_image_url , article_image_missing_error ), Otherwise ( produce_article_completed_event ()), ) . run ( article )","title":"Basic Example"},{"location":"basic_example/#basic-example","text":"In order for an article to be completed it must have the following rules ArticleStockUpdated where stock is > 0 ArticleImageUploaded where the image url is present ArticlePriceUpdated where the price exists from collections import namedtuple from typing import Union from rules_engine import Otherwise , Rule , RulesEngine , then Article = namedtuple ( \"Article\" , \"title price image_url stock\" ) article = Article ( title = \"Iphone Case\" , price = 1000 , image_url = \"http://localhost/image\" , stock = None ) def produce_article_completed_event (): return None def article_controller ( article : Article ) -> Union [ bool , None ]: if not article . stock : return False if not article . price : raise ValueError ( \"Article price missing\" ) if not article . image_url : raise ValueError ( \"Article image_url missing\" ) return produce_article_completed_event () To be able to change to rules engine We need to split the conditions and actions Rules engine is pretty simple if the condition is True The rules engine will run the action ### Conditions def no_article_stock ( article ): return not article . stock def no_article_price ( article ): return not article . price def no_article_image_url ( article ): return not article . image_url ### Actions def article_price_missing_error ( article ): raise ValueError ( \"Article price missing\" ) def article_image_missing_error ( article ): raise ValueError ( \"Article image_url missing\" ) ### Rules Engine def article_complete_rules ( article ): RulesEngine ( Rule ( no_article_stock , then ( False )), Rule ( no_article_price , article_price_missing_error ), Rule ( no_article_image_url , article_image_missing_error ), Otherwise ( produce_article_completed_event ()), ) . run ( article )","title":"Basic Example"},{"location":"install/","text":"Install Requirements python >= 3.6 Using Pip pip install rules-engine","title":"Install"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#requirements","text":"python >= 3.6","title":"Requirements"},{"location":"install/#using-pip","text":"pip install rules-engine","title":"Using Pip"},{"location":"not/","text":"Not The not_ keyword is a logical operator. The return value will be True if the statement(s) are not True , otherwise it will return False . from rules_engine import Rule , RulesEngine , not_ def is_missing ( obj ): return not obj obj = \"Hello\" RulesEngine ( Rule ( not_ ( is_missing ), then ( True ))) . run ( obj ) >>> True","title":"not_"},{"location":"not/#not","text":"The not_ keyword is a logical operator. The return value will be True if the statement(s) are not True , otherwise it will return False . from rules_engine import Rule , RulesEngine , not_ def is_missing ( obj ): return not obj obj = \"Hello\" RulesEngine ( Rule ( not_ ( is_missing ), then ( True ))) . run ( obj ) >>> True","title":"Not"},{"location":"when_then/","text":"When\\Then When Evaluates a condition. lets check if a value is None and raise an exception from rules_engine import Rule , RulesEngine , when obj = None def raise_cannot_be_none_error (): raise ValueError ( \"not a string error\" ) RulesEngine ( Rule ( when ( obj is None ), raise_cannot_be_none_error )) . run ( obj ) >>> ValueError : not a string error Then Evaluates an action from rules_engine import Rule , RulesEngine , when obj = None RulesEngine ( Rule ( when ( obj is None ), then ( raise ValueError ( 'not a string error' )))) . run ( obj ) >>> ValueError : not a string error","title":"When/Then"},{"location":"when_then/#whenthen","text":"","title":"When\\Then"},{"location":"when_then/#when","text":"Evaluates a condition. lets check if a value is None and raise an exception from rules_engine import Rule , RulesEngine , when obj = None def raise_cannot_be_none_error (): raise ValueError ( \"not a string error\" ) RulesEngine ( Rule ( when ( obj is None ), raise_cannot_be_none_error )) . run ( obj ) >>> ValueError : not a string error","title":"When"},{"location":"when_then/#then","text":"Evaluates an action from rules_engine import Rule , RulesEngine , when obj = None RulesEngine ( Rule ( when ( obj is None ), then ( raise ValueError ( 'not a string error' )))) . run ( obj ) >>> ValueError : not a string error","title":"Then"}]}